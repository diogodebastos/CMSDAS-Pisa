#define SusyDas2019_cxx
#include "SusyDas2019.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <iostream>
#include <utility>
#include <TStopwatch.h>

void SusyDas2019::Loop()
{
//   In a ROOT session, you can do:
//      root> .L SusyDas2019.C
//      root> SusyDas2019 t
//      root> t.GetEntry(12); // Fill t data members with entry number 12
//      root> t.Show();       // Show values of entry 12
//      root> t.Show(16);     // Read and show values of entry 16
//      root> t.Loop();       // Loop on all entries
//

//     This is the loop skeleton where:
//    jentry is the global entry number in the chain
//    ientry is the entry number in the current Tree
//  Note that the argument to GetEntry must be:
//    jentry for TChain::GetEntry
//    ientry for TTree::GetEntry and TBranch::GetEntry
//
//       To read only selected branches, Insert statements like:
// METHOD1:
//    fChain->SetBranchStatus("*",0);  // disable all branches
//    fChain->SetBranchStatus("branchname",1);  // activate branchname
// METHOD2: replace line
//    fChain->GetEntry(jentry);       //read all branches
//by  b_branchname->GetEntry(ientry); //read only this branch
   if (fChain == 0) return;

   hrepo.clear();
   DeactivateUselessBranches();

   // BOOK YOUR HISTOGRAMS HERE, AND KEEP THEIR POINTERS TO AVOID LOSING ACCESS TO THEM
   // WHEN THE LOOP() FUNCTION EXITS
   
   // hrepo is a std::map<std::string, TH1F*> that we use to keep pointers
   hrepo.insert(std::make_pair("numberOfLeptons",new TH1F("numberOfLeptons","Number of leptons",10,-0.5,9.5)));

   Long64_t nentries = fChain->GetEntriesFast();

   Long64_t nbytes = 0, nb = 0;
   TStopwatch glb_clock;
   TStopwatch loc_clock;
   long report_interval = 100000;
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      if (jentry && jentry%report_interval==0) {
	loc_clock.RealTime();
	glb_clock.RealTime();
	std::cout << Form("Processed entries: %lld out of %lld (%.1f%%)",jentry,nentries,float(jentry)/nentries*100);
	std::cout << Form(" - inst. %.0f Hz, glob. %.0f Hz)",float(report_interval)/loc_clock.RealTime(),float(jentry)/glb_clock.RealTime()) << std::endl;
	glb_clock.Start(false);
	loc_clock.Start(true);
      }
      // if (Cut(ientry) < 0) continue;

      // DO WHATEVER IS NEEDED HERE (E.G. FILL HISTOGRAMS)
      hrepo["numberOfLeptons"]->Fill(nLepGood);

   }

   // PRODUCE YOUR OUTPUT HERE (PLOTTING, SAVING HISTOGRAMS ETC.)
   hrepo["numberOfLeptons"]->Print();
   
}
